plugins {
    id 'java'
    id 'jacoco'
    id 'maven'
    id 'maven-publish'
    id 'com.gradle.build-scan' version '1.16'
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

group 'com.timeafunction'
version '0.1-SNAPSHOT'

sourceCompatibility = 1.8

dependencies {
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

test {
    useJUnitPlatform()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    publishAlways()
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.timeafunction'
            artifactId = 'time-me'
            version = '0.1-SNAPSHOT'

            from components.java
        }
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives packageJavadoc
    archives packageSources
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: maven2_url) {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            snapshotRepository(url: snapshot_url) {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            pom.project {
                name project_name
                packaging 'jar'
                description project_description
                url project_url
                scm {
                    connection project_scm
                    developerConnection project_scm
                    url project_url
                }
                licenses {
                    license {
                        name project_license_name
                        url project_license_url
                    }
                }
                developers {
                    developer {
                        id project_developer
                        name project_developer
                    }
                }
            }
        }
    }
}